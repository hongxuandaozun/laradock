<?php


namespace App\Services\Auth;
use Closure;
use http\Exception\InvalidArgumentException;
use Illuminate\Auth\Passwords\PasswordBrokerManager as BasePasswordBrokerManager;
use Illuminate\Support\Facades\Auth;

class PasswordBrokerManager extends BasePasswordBrokerManager
{
    /**
     * Create a token repository instance based on the given configuration.
     *
     * @param  array  $config
     * @return \Illuminate\Auth\Passwords\TokenRepositoryInterface
     */
    public function createTokenRepository(array $config)
    {
        return new ServiceTokenRepository();
    }


    public function broker($name = null)
    {
        return parent::broker($name); // TODO: Change the autogenerated stub
    }

    public function resolve($name)
    {
        $config = $this->getConfig($name);
        if(is_null($config)){
            throw new InvalidArgumentException("密码重置器[$name]未定义");
        }
        return new PasswordBroker(
            $this->createTokenRepository($config),
            $this->app['auth']->createUserProvider($config['provider']??null)
        );
        return parent::resolve($name); // TODO: Change the autogenerated stub
    }
    public function validateNewPassword(array $credentials)
    {
        // TODO: Implement validateNewPassword() method.
    }
    public function sendResetLink(array $credentials)
    {
        // TODO: Implement sendResetLink() method.
    }
    public function validator(Closure $callback)
    {
        // TODO: Implement validator() method.
    }
    public function reset(array $credentials, Closure $callback)
    {
        // TODO: Implement reset() method.
    }
}